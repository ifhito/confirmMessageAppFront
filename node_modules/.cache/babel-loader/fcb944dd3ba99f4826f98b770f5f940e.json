{"ast":null,"code":"import _slicedToArray from \"/Users/a.seki/Documents/twitter_post/confirmMessageApp/tweet-ref/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/a.seki/Documents/twitter_post/confirmMessageApp/tweet-ref/src/TwitterInputForm.js\";\n\nconst TwitterInputForm = props => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setName = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        message = _useState4[0],\n        setMessage = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        count = _useState6[0],\n        setCount = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        error = _useState8[0],\n        setError = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        greetingStatus = _useState10[0],\n        displayGreeting = _useState10[1];\n\n  const _useState11 = useState(''),\n        _useState12 = _slicedToArray(_useState11, 2),\n        id = _useState12[0],\n        setId = _useState12[1];\n\n  const contentProps = useSpring({\n    opacity: greetingStatus ? 1 : 0,\n    marginLeft: greetingStatus ? 0 : 1000\n  });\n  useEffect(async () => {\n    const userId = getParam('Id');\n    setId(String(userId));\n    console.log(userId);\n    const params = {\n      id: userId\n    };\n    console.log(params);\n    let res;\n\n    try {\n      res = await axios.get(url + '/get_name', {\n        params\n      });\n    } catch (error) {\n      console.log(error);\n    }\n\n    setName(res.data.name);\n  }, [setId]);\n  const contentProp = useSpring({\n    opacity: greetingStatus ? 0 : 1,\n    marginRight: greetingStatus ? 2000 : 0\n  }); //   const confirms = () => {\n  //     if (count == '') {\n  //       setError('空です。入力してください');\n  //       displayGreeting(false);\n  //     } else {\n  //       setError('');\n  //       displayGreeting(true);\n  //     }\n  //   };\n\n  const handleChange = event => {\n    switch (event.target.name) {\n      case 'message':\n        setMessage(event.target.value);\n        break;\n\n      case 'count':\n        setCount(event.target.value);\n        break;\n\n      default:\n        console.log('key not found');\n    }\n  }; //   const confirmCount = () => {\n  //     if (count == '') {\n  //       setError('入力してください');\n  //     } else {\n  //       displayGreeting(true);\n  //     }\n  //   };\n\n\n  const handleSubmit = async event => {\n    if (message == '' || count == '') {\n      setError('messageを入力してください');\n    } else {\n      event.preventDefault();\n      const params = {\n        id: id,\n        type: 'Twiiter',\n        message: message,\n        count: count\n      };\n      console.log(id);\n\n      try {\n        let res = await axios.get('http://0.0.0.0:5000' + '/push_data', {\n          params\n        });\n        window.location.href = res.data;\n        console.log('OK');\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"vertificationDocuments foldtl\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"verification\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"\\u627F\\u8A8D\\u8A3C\"), React.createElement(\"div\", {\n    className: \"Container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"nameTitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"\\u540D\\u524D\"), React.createElement(\"div\", {\n    className: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, name), React.createElement(\"p\", {\n    className: \"messageTitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\"), React.createElement(\"textarea\", {\n    name: \"message\",\n    value: message,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"vertificationNum\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"messageTitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"\\u4F55\\u4EBA\\u306B\\u78BA\\u8A8D\\u3057\\u3066\\u6B32\\u3057\\u3044\\u304B\\uFF1F\"), React.createElement(\"input\", {\n    className: \"vertificationNumber\",\n    value: count,\n    onChange: handleChange,\n    type: \"number\",\n    name: \"count\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }))), React.createElement(\"button\", {\n    class: \"TwitterButton\",\n    onClick: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"\\u6C7A\\u5B9A\")));\n};\n\nexport default TwitterInputForm;","map":{"version":3,"sources":["/Users/a.seki/Documents/twitter_post/confirmMessageApp/tweet-ref/src/TwitterInputForm.js"],"names":["TwitterInputForm","props","useState","name","setName","message","setMessage","count","setCount","error","setError","greetingStatus","displayGreeting","id","setId","contentProps","useSpring","opacity","marginLeft","useEffect","userId","getParam","String","console","log","params","res","axios","get","url","data","contentProp","marginRight","handleChange","event","target","value","handleSubmit","preventDefault","type","window","location","href"],"mappings":"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","sourcesContent":["const TwitterInputForm = props => {\n  const [name, setName] = useState('');\n  const [message, setMessage] = useState('');\n  const [count, setCount] = useState('');\n  const [error, setError] = useState('');\n  const [greetingStatus, displayGreeting] = useState(false);\n  const [id, setId] = useState('');\n  const contentProps = useSpring({\n    opacity: greetingStatus ? 1 : 0,\n    marginLeft: greetingStatus ? 0 : 1000\n  });\n  useEffect(async () => {\n    const userId = getParam('Id');\n    setId(String(userId));\n    console.log(userId);\n    const params = {\n      id: userId\n    };\n    console.log(params);\n    let res;\n    try {\n      res = await axios.get(url + '/get_name', { params });\n    } catch (error) {\n      console.log(error);\n    }\n    setName(res.data.name);\n  }, [setId]);\n\n  const contentProp = useSpring({\n    opacity: greetingStatus ? 0 : 1,\n    marginRight: greetingStatus ? 2000 : 0\n  });\n  //   const confirms = () => {\n  //     if (count == '') {\n  //       setError('空です。入力してください');\n  //       displayGreeting(false);\n  //     } else {\n  //       setError('');\n  //       displayGreeting(true);\n  //     }\n  //   };\n  const handleChange = event => {\n    switch (event.target.name) {\n      case 'message':\n        setMessage(event.target.value);\n        break;\n      case 'count':\n        setCount(event.target.value);\n        break;\n      default:\n        console.log('key not found');\n    }\n  };\n  //   const confirmCount = () => {\n  //     if (count == '') {\n  //       setError('入力してください');\n  //     } else {\n  //       displayGreeting(true);\n  //     }\n  //   };\n  const handleSubmit = async event => {\n    if (message == '' || count == '') {\n      setError('messageを入力してください');\n    } else {\n      event.preventDefault();\n      const params = {\n        id: id,\n        type: 'Twiiter',\n        message: message,\n        count: count\n      };\n      console.log(id);\n      try {\n        let res = await axios.get('http://0.0.0.0:5000' + '/push_data', {\n          params\n        });\n        window.location.href = res.data;\n        console.log('OK');\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n  return (\n    <>\n      <div className=\"vertificationDocuments foldtl\">\n        <h1 className=\"verification\">承認証</h1>\n        <div className=\"Container\">\n          <p className=\"nameTitle\">名前</p>\n          <div className=\"name\">{name}</div>\n          <p className=\"messageTitle\">メッセージ</p>\n          <textarea\n            name=\"message\"\n            value={message}\n            onChange={handleChange}\n          ></textarea>\n          <div className=\"vertificationNum\">\n            <p className=\"messageTitle\">何人に確認して欲しいか？</p>\n            <input\n              className=\"vertificationNumber\"\n              value={count}\n              onChange={handleChange}\n              type=\"number\"\n              name=\"count\"\n            />\n          </div>\n        </div>\n        <button class=\"TwitterButton\" onClick={handleSubmit}>\n          決定\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default TwitterInputForm;\n"]},"metadata":{},"sourceType":"module"}