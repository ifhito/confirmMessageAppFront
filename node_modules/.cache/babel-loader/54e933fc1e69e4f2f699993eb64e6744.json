{"ast":null,"code":"import _slicedToArray from \"/Users/a.seki/Documents/twitter_post/tweet-ref/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/a.seki/Documents/twitter_post/tweet-ref/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { useState, useEffect, useContext, createContext } from 'react'; // const accessOauth = () => {\n//   return <button onClick={handleClick}>連携アプリ認証</button>;\n// };\n\nconst InputForm = () => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setName = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        message = _useState4[0],\n        setMessage = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        count = _useState6[0],\n        setCount = _useState6[1];\n\n  const handleChange = event => {\n    switch (event.target.name) {\n      case 'name':\n        setName(event.target.value);\n        break;\n\n      case 'message':\n        setMessage(event.target.value);\n        break;\n\n      case 'count':\n        setMessage(event.target.value);\n        break;\n\n      default:\n        console.log('key not found');\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log(name);\n    console.log(pass);\n  };\n\n  return React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Name:\", React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    value: name,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Message:\", React.createElement(\"input\", {\n    type: \"text\",\n    name: \"message\",\n    value: message,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Count:\", React.createElement(\"input\", {\n    type: \"text\",\n    name: \"count\",\n    value: message,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }));\n};\n\nconst AccessOauth = ws => {\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        userData = _useState8[0],\n        setUserData = _useState8[1];\n\n  const _useState9 = useState(''),\n        _useState10 = _slicedToArray(_useState9, 2),\n        data = _useState10[0],\n        setData = _useState10[1]; // サーバー側からメッセージが送られてきた際に受け取り、関数を発動する(Twitterの認証用URLに飛ぶため)\n\n\n  ws.onmessage = e => {\n    console.log(e);\n\n    if (e.data.includes('oauth_token')) {\n      window.location.href = e.data;\n    } else {\n      console.log(e);\n      setData(e.data);\n    }\n  }; //クリックした時(今回は文字をbuttonをクリックしたらサーバーにTwitterのもじが送られる)\n\n\n  const handleClick = () => {\n    console.log('rest');\n    ws.send('Twitter');\n  };\n\n  return React.createElement(\"button\", {\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Twitter\\u8A8D\\u8A3C\");\n};\n\nfunction App() {\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        flag = _useState12[0],\n        setFlag = _useState12[1];\n\n  const ws = new WebSocket('ws://localhost:5000/pipe');\n  webSocketとの通信;\n  レンダー前にwsがopenした後にurl内のverifierを返す;\n  useEffect(() => {\n    ws.onopen = event => {\n      if (userData == false && window.location.search.includes('verifier')) {\n        console.log('useEffect');\n        setFlag(true);\n        console.log(typeof getParam('oauth_token'));\n        const envelope = {\n          oauth_token: getParam('oauth_token'),\n          oauth_verifier: getParam('oauth_verifier')\n        }; //サーバへ送信\n        // ws.send(JSON.stringify(envelope));\n      }\n    };\n\n    setUserData('true');\n  }); //url無いの特定の要素を持ってくるためのコード(コピペ)\n\n  function getParam(name, url) {\n    if (!url) url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n  } //レンダー要素の切替\n\n\n  let render = flag ? React.createElement(InputForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }) : React.createElement(AccessOauth, {\n    ws: ws,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  });\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/a.seki/Documents/twitter_post/tweet-ref/src/App.js"],"names":["React","useState","useEffect","useContext","createContext","InputForm","name","setName","message","setMessage","count","setCount","handleChange","event","target","value","console","log","handleSubmit","preventDefault","pass","AccessOauth","ws","userData","setUserData","data","setData","onmessage","e","includes","window","location","href","handleClick","send","App","flag","setFlag","WebSocket","webSocketとの通信","レンダー前にwsがopenした後にurl内のverifierを返す","onopen","search","getParam","envelope","oauth_token","oauth_verifier","url","replace","regex","RegExp","results","exec","decodeURIComponent","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { useState, useEffect, useContext, createContext } from 'react';\n\n// const accessOauth = () => {\n//   return <button onClick={handleClick}>連携アプリ認証</button>;\n// };\nconst InputForm = () => {\n  const [name, setName] = useState('');\n  const [message, setMessage] = useState('');\n  const [count, setCount] = useState('');\n\n  const handleChange = event => {\n    switch (event.target.name) {\n      case 'name':\n        setName(event.target.value);\n        break;\n      case 'message':\n        setMessage(event.target.value);\n        break;\n      case 'count':\n        setMessage(event.target.value);\n        break;\n      default:\n        console.log('key not found');\n    }\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log(name);\n    console.log(pass);\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Name:\n        <input type=\"text\" name=\"name\" value={name} onChange={handleChange} />\n      </label>\n      <label>\n        Message:\n        <input\n          type=\"text\"\n          name=\"message\"\n          value={message}\n          onChange={handleChange}\n        />\n      </label>\n      <label>\n        Count:\n        <input\n          type=\"text\"\n          name=\"count\"\n          value={message}\n          onChange={handleChange}\n        />\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n};\n\nconst AccessOauth = ws => {\n  const [userData, setUserData] = useState('');\n  const [data, setData] = useState('');\n  // サーバー側からメッセージが送られてきた際に受け取り、関数を発動する(Twitterの認証用URLに飛ぶため)\n  ws.onmessage = e => {\n    console.log(e);\n    if (e.data.includes('oauth_token')) {\n      window.location.href = e.data;\n    } else {\n      console.log(e);\n      setData(e.data);\n    }\n  };\n  //クリックした時(今回は文字をbuttonをクリックしたらサーバーにTwitterのもじが送られる)\n  const handleClick = () => {\n    console.log('rest');\n    ws.send('Twitter');\n  };\n  return <button onClick={handleClick}>Twitter認証</button>;\n};\n\nfunction App() {\n  const [flag, setFlag] = useState(false);\n  const ws = new WebSocket('ws://localhost:5000/pipe');\n\n  webSocketとの通信;\n  レンダー前にwsがopenした後にurl内のverifierを返す;\n  useEffect(() => {\n    ws.onopen = event => {\n      if (userData == false && window.location.search.includes('verifier')) {\n        console.log('useEffect');\n        setFlag(true);\n        console.log(typeof getParam('oauth_token'));\n        const envelope = {\n          oauth_token: getParam('oauth_token'),\n          oauth_verifier: getParam('oauth_verifier')\n        };\n        //サーバへ送信\n        // ws.send(JSON.stringify(envelope));\n      }\n    };\n    setUserData('true');\n  });\n\n  //url無いの特定の要素を持ってくるためのコード(コピペ)\n  function getParam(name, url) {\n    if (!url) url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n      results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n  }\n\n  //レンダー要素の切替\n  let render = flag ? <InputForm /> : <AccessOauth ws={ws} />;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}