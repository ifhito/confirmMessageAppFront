{"ast":null,"code":"import _slicedToArray from \"/Users/a.seki/Documents/twitter_post/tweet-ref/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/a.seki/Documents/twitter_post/tweet-ref/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\n\nfunction accessOauth(handleClick) {\n  return React.createElement(\"button\", {\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, \"\\u9023\\u643A\\u30A2\\u30D7\\u30EA\\u8A8D\\u8A3C\");\n}\n\nfunction textInput() {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setName = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        message = _useState4[0],\n        setMessage = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        count = _useState6[0],\n        setCount = _useState6[1];\n\n  const _useForm = useForm(),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit;\n\n  const onSubmit = data => {\n    console.log(data);\n  };\n\n  return React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Name:\", React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    ref: register,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"Message:\", React.createElement(\"input\", {\n    type: \"text\",\n    name: \"message\",\n    ref: register,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Count:\", React.createElement(\"input\", {\n    type: \"text\",\n    name: \"count\",\n    ref: register,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }));\n}\n\nfunction App() {\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        flag = _useState8[0],\n        setFlag = _useState8[1];\n\n  const _useState9 = useState(''),\n        _useState10 = _slicedToArray(_useState9, 2),\n        userData = _useState10[0],\n        setUserData = _useState10[1];\n\n  const _useState11 = useState(''),\n        _useState12 = _slicedToArray(_useState11, 2),\n        data = _useState12[0],\n        setData = _useState12[1]; //webSocketとの通信\n\n\n  const ws = new WebSocket('ws://localhost:5000/pipe'); // レンダー前にwsがopenした後にurl内のverifierを返す\n  // useEffect(() => {\n  //   ws.onopen = event => {\n  //     if (userData == false && window.location.search.includes('verifier')) {\n  //       console.log('useEffect');\n  //       setFlag(true);\n  //       console.log(typeof getParam('oauth_token'));\n  //       const envelope = {\n  //         oauth_token: getParam('oauth_token'),\n  //         oauth_verifier: getParam('oauth_verifier')\n  //       };\n  //       //サーバへ送信\n  //       ws.send(JSON.stringify(envelope));\n  //     }\n  //   };\n  //   setUserData('true');\n  // });\n  //url無いの特定の要素を持ってくるためのコード(コピペ)\n\n  function getParam(name, url) {\n    if (!url) url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n  } // サーバー側からメッセージが送られてきた際に受け取り、関数を発動する(Twitterの認証用URLに飛ぶため)\n\n\n  ws.onmessage = e => {\n    console.log(e);\n\n    if (e.data.includes('oauth_token')) {\n      window.location.href = e.data;\n    } else {\n      console.log(e);\n      setData(e.data);\n    }\n  }; //クリックした時(今回は文字をbuttonをクリックしたらサーバーにTwitterのもじが送られる)\n\n\n  function handleClick() {\n    console.log('rest');\n    ws.send('Twitter');\n  }\n\n  console.log(flag); //レンダー要素の切替\n\n  let render = flag ? React.createElement(\"textInput\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }) : React.createElement(\"accessOauth\", {\n    handleClick: this.state.handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  });\n  return React.createElement(React.Fragment, null, render);\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/a.seki/Documents/twitter_post/tweet-ref/src/App.js"],"names":["React","useState","useEffect","useForm","accessOauth","handleClick","textInput","name","setName","message","setMessage","count","setCount","register","handleSubmit","onSubmit","data","console","log","App","flag","setFlag","userData","setUserData","setData","ws","WebSocket","getParam","url","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent","onmessage","e","includes","send","render","state"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,iBAAxB;;AAEA,SAASC,WAAT,CAAqBC,WAArB,EAAkC;AAChC,SAAO;AAAQ,IAAA,OAAO,EAAEA,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAAP;AACD;;AAED,SAASC,SAAT,GAAqB;AAAA,oBACKL,QAAQ,CAAC,EAAD,CADb;AAAA;AAAA,QACZM,IADY;AAAA,QACNC,OADM;;AAAA,qBAEWP,QAAQ,CAAC,EAAD,CAFnB;AAAA;AAAA,QAEZQ,OAFY;AAAA,QAEHC,UAFG;;AAAA,qBAGOT,QAAQ,CAAC,EAAD,CAHf;AAAA;AAAA,QAGZU,KAHY;AAAA,QAGLC,QAHK;;AAAA,mBAIgBT,OAAO,EAJvB;AAAA,QAIXU,QAJW,YAIXA,QAJW;AAAA,QAIDC,YAJC,YAIDA,YAJC;;AAKnB,QAAMC,QAAQ,GAAGC,IAAI,IAAI;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD,GAFD;;AAGA,SACE;AAAM,IAAA,QAAQ,EAAEF,YAAY,CAACC,QAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAEE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,MAAxB;AAA+B,IAAA,GAAG,EAAEF,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,SAAxB;AAAkC,IAAA,GAAG,EAAEA,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CALF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAEE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,OAAxB;AAAgC,IAAA,GAAG,EAAEA,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CATF,EAaE;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,KAAK,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,CADF;AAiBD;;AACD,SAASM,GAAT,GAAe;AAAA,qBACWlB,QAAQ,CAAC,KAAD,CADnB;AAAA;AAAA,QACNmB,IADM;AAAA,QACAC,OADA;;AAAA,qBAEmBpB,QAAQ,CAAC,EAAD,CAF3B;AAAA;AAAA,QAENqB,QAFM;AAAA,QAEIC,WAFJ;;AAAA,sBAGWtB,QAAQ,CAAC,EAAD,CAHnB;AAAA;AAAA,QAGNe,IAHM;AAAA,QAGAQ,OAHA,mBAIb;;;AACA,QAAMC,EAAE,GAAG,IAAIC,SAAJ,CAAc,0BAAd,CAAX,CALa,CAMb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,WAASC,QAAT,CAAkBpB,IAAlB,EAAwBqB,GAAxB,EAA6B;AAC3B,QAAI,CAACA,GAAL,EAAUA,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAtB;AACVxB,IAAAA,IAAI,GAAGA,IAAI,CAACyB,OAAL,CAAa,SAAb,EAAwB,MAAxB,CAAP;AACA,QAAIC,KAAK,GAAG,IAAIC,MAAJ,CAAW,SAAS3B,IAAT,GAAgB,mBAA3B,CAAZ;AAAA,QACE4B,OAAO,GAAGF,KAAK,CAACG,IAAN,CAAWR,GAAX,CADZ;AAEA,QAAI,CAACO,OAAL,EAAc,OAAO,IAAP;AACd,QAAI,CAACA,OAAO,CAAC,CAAD,CAAZ,EAAiB,OAAO,EAAP;AACjB,WAAOE,kBAAkB,CAACF,OAAO,CAAC,CAAD,CAAP,CAAWH,OAAX,CAAmB,KAAnB,EAA0B,GAA1B,CAAD,CAAzB;AACD,GAjCY,CAmCb;;;AACAP,EAAAA,EAAE,CAACa,SAAH,GAAeC,CAAC,IAAI;AAClBtB,IAAAA,OAAO,CAACC,GAAR,CAAYqB,CAAZ;;AACA,QAAIA,CAAC,CAACvB,IAAF,CAAOwB,QAAP,CAAgB,aAAhB,CAAJ,EAAoC;AAClCX,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuBQ,CAAC,CAACvB,IAAzB;AACD,KAFD,MAEO;AACLC,MAAAA,OAAO,CAACC,GAAR,CAAYqB,CAAZ;AACAf,MAAAA,OAAO,CAACe,CAAC,CAACvB,IAAH,CAAP;AACD;AACF,GARD,CApCa,CA6Cb;;;AACA,WAASX,WAAT,GAAuB;AACrBY,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAO,IAAAA,EAAE,CAACgB,IAAH,CAAQ,SAAR;AACD;;AACDxB,EAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ,EAlDa,CAoDb;;AACA,MAAIsB,MAAM,GAAGtB,IAAI,GACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADe,GAGf;AAAa,IAAA,WAAW,EAAE,KAAKuB,KAAL,CAAWtC,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF;AAKA,SAAO,0CAAGqC,MAAH,CAAP;AACD;;AAED,eAAevB,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\n\nfunction accessOauth(handleClick) {\n  return <button onClick={handleClick}>連携アプリ認証</button>;\n}\n\nfunction textInput() {\n  const [name, setName] = useState('');\n  const [message, setMessage] = useState('');\n  const [count, setCount] = useState('');\n  const { register, handleSubmit } = useForm();\n  const onSubmit = data => {\n    console.log(data);\n  };\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <label>\n        Name:\n        <input type=\"text\" name=\"name\" ref={register} />\n      </label>\n      <label>\n        Message:\n        <input type=\"text\" name=\"message\" ref={register} />\n      </label>\n      <label>\n        Count:\n        <input type=\"text\" name=\"count\" ref={register} />\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n}\nfunction App() {\n  const [flag, setFlag] = useState(false);\n  const [userData, setUserData] = useState('');\n  const [data, setData] = useState('');\n  //webSocketとの通信\n  const ws = new WebSocket('ws://localhost:5000/pipe');\n  // レンダー前にwsがopenした後にurl内のverifierを返す\n  // useEffect(() => {\n  //   ws.onopen = event => {\n  //     if (userData == false && window.location.search.includes('verifier')) {\n  //       console.log('useEffect');\n  //       setFlag(true);\n  //       console.log(typeof getParam('oauth_token'));\n  //       const envelope = {\n  //         oauth_token: getParam('oauth_token'),\n  //         oauth_verifier: getParam('oauth_verifier')\n  //       };\n  //       //サーバへ送信\n  //       ws.send(JSON.stringify(envelope));\n  //     }\n  //   };\n  //   setUserData('true');\n  // });\n\n  //url無いの特定の要素を持ってくるためのコード(コピペ)\n  function getParam(name, url) {\n    if (!url) url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n      results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n  }\n\n  // サーバー側からメッセージが送られてきた際に受け取り、関数を発動する(Twitterの認証用URLに飛ぶため)\n  ws.onmessage = e => {\n    console.log(e);\n    if (e.data.includes('oauth_token')) {\n      window.location.href = e.data;\n    } else {\n      console.log(e);\n      setData(e.data);\n    }\n  };\n  //クリックした時(今回は文字をbuttonをクリックしたらサーバーにTwitterのもじが送られる)\n  function handleClick() {\n    console.log('rest');\n    ws.send('Twitter');\n  }\n  console.log(flag);\n\n  //レンダー要素の切替\n  let render = flag ? (\n    <textInput />\n  ) : (\n    <accessOauth handleClick={this.state.handleClick} />\n  );\n  return <>{render}</>;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}